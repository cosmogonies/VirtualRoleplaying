Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: discord.py in ./.local/lib/python3.9/site-packages (1.7.3)
Requirement already satisfied: aiohttp<3.8.0,>=3.6.0 in ./.local/lib/python3.9/site-packages (from discord.py) (3.7.4.post0)
Requirement already satisfied: yarl<2.0,>=1.0 in ./.local/lib/python3.9/site-packages (from aiohttp<3.8.0,>=3.6.0->discord.py) (1.6.3)
Requirement already satisfied: multidict<7.0,>=4.5 in ./.local/lib/python3.9/site-packages (from aiohttp<3.8.0,>=3.6.0->discord.py) (5.2.0)
Requirement already satisfied: chardet<5.0,>=2.0 in ./.local/lib/python3.9/site-packages (from aiohttp<3.8.0,>=3.6.0->discord.py) (4.0.0)
Requirement already satisfied: typing-extensions>=3.6.5 in ./.local/lib/python3.9/site-packages (from aiohttp<3.8.0,>=3.6.0->discord.py) (3.10.0.2)
Requirement already satisfied: attrs>=17.3.0 in ./.local/lib/python3.9/site-packages (from aiohttp<3.8.0,>=3.6.0->discord.py) (21.2.0)
Requirement already satisfied: async-timeout<4.0,>=3.0 in ./.local/lib/python3.9/site-packages (from aiohttp<3.8.0,>=3.6.0->discord.py) (3.0.1)
Requirement already satisfied: idna>=2.0 in /usr/lib/python3/dist-packages (from yarl<2.0,>=1.0->aiohttp<3.8.0,>=3.6.0->discord.py) (2.6)
WARNING: You are using pip version 21.2.4; however, version 21.3 is available.
You should consider upgrading via the '/usr/bin/python3.7 -m pip install --upgrade pip' command.
Logged in as altereal.bot (ID: 4WP0JYEd)
------
server has 84 channels.
Help on ChatChannel in module guilded.channel object:

class ChatChannel(guilded.abc.TeamChannel, guilded.abc.Messageable)
 |  ChatChannel(**fields)
 |  
 |  Represents a chat channel in a team.
 |  
 |  Method resolution order:
 |      ChatChannel
 |      guilded.abc.TeamChannel
 |      guilded.abc.Messageable
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, **fields)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  async create_thread(self, *content, **kwargs)
 |      |coro|
 |      
 |      Create a new thread in this channel.
 |      
 |      Parameters
 |      ------------
 |      content: Any
 |          The content of the message that should be created as the initial
 |          message of the newly-created thread. Passing either this or
 |          ``message`` is required.
 |      name: :class:`str`
 |          The name to create the thread with.
 |      message: Optional[:class:`ChatMessage`]
 |          The message to create the thread from. Passing either this or
 |          values for ``content`` is required.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from guilded.abc.TeamChannel:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  async delete(self)
 |      |coro|
 |      
 |      Delete this channel.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from guilded.abc.TeamChannel:
 |  
 |  guild
 |  
 |  mention
 |  
 |  team
 |  
 |  topic
 |  
 |  vanity_url
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from guilded.abc.TeamChannel:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from guilded.abc.TeamChannel:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from guilded.abc.Messageable:
 |  
 |  async fetch_message(self, id: str) -> guilded.message.ChatMessage
 |      |coro|
 |      
 |      Fetch a message.
 |      
 |      Parameters
 |      -----------
 |      id: :class:`str`
 |          The message's ID to fetch.
 |      
 |      Returns
 |      --------
 |      :class:`Message`
 |          The message from the ID.
 |  
 |  async history(self, *, limit: int = 50) -> List[guilded.message.ChatMessage]
 |      |coro|
 |      
 |      Fetch the message history of this channel.
 |      
 |      Parameters
 |      -----------
 |      limit: Optional[:class:`int`]
 |          The maximum number of messages to fetch. Defaults to 50.
 |      
 |      Returns
 |      --------
 |      List[:class:`Message`]
 |  
 |  async send(self, *content, **kwargs) -> guilded.message.ChatMessage
 |      |coro|
 |      
 |      Send a message to a Guilded channel.
 |      
 |      .. note::
 |          Guilded supports embeds/attachments/strings in any order, which is
 |          not practically possible with keyword arguments. For this reason,
 |          it is recommended that you pass arguments positionally instead.
 |      
 |      .. warning::
 |          Setting both ``silent`` and ``private`` to ``True`` (a private
 |          reply with no mention) will not send the reply to the author of
 |          the message(s) unless they refresh the channel.
 |      
 |      Parameters
 |      -----------
 |      content: Union[:class:`str`, :class:`Embed`, :class:`File`, :class:`Emoji`]
 |          An argument list of the message content, passed in the order that
 |          each element should display in the message.
 |      reply_to: List[:class:`Message`]
 |          A list of up to 5 messages to reply to.
 |      silent: :class:`bool`
 |          Whether this reply should not mention the authors of the messages
 |          it is replying to, if any. Defaults to ``False``. There is an alias
 |          for this called ``mention_author``, which has the opposite behavior.
 |      private: :class:`bool`
 |          Whether this message should only be visible to its author (the
 |          bot) and the authors of the messages it is replying to. Defaults
 |          to ``False``. You should not include sensitive data in these
 |          because private replies can still be visible to server moderators.
 |  
 |  async trigger_typing(self)
 |      |coro|
 |      
 |      Begin your typing indicator in this channel.

None
